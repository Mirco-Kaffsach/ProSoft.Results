using System.Diagnostics.CodeAnalysis;

namespace ProSoft.Results;

/// <summary>
/// Class PagedResult.
/// Implements the <see cref="System.IDisposable" />
/// </summary>
/// <typeparam name="TValue">The type of the t value.</typeparam>
/// <seealso cref="System.IDisposable" />
public class PagedResult<TValue> : IDisposable
{
   /// <summary>
   /// Gets or sets the result list.
   /// </summary>
   /// <value>The result list.</value>
   public List<TValue> ResultList { get; set; }

   /// <summary>
   /// Gets the size of the page.
   /// </summary>
   /// <value>The size of the page.</value>
   public int PageSize { get; private set; }

   /// <summary>
   /// Gets the page count.
   /// </summary>
   /// <value>The page count.</value>
   public int PageCount { get; private set; }

   /// <summary>
   /// Gets the current page.
   /// </summary>
   /// <value>The current page.</value>
   public int CurrentPage { get; private set; }

   /// <summary>
   /// Gets the total count.
   /// </summary>
   /// <value>The total count.</value>
   public long TotalCount { get; private set; }

   /// <summary>
   /// Initializes a new instance of the <see cref="PagedResult{TValue}"/> class.
   /// </summary>
   /// <param name="resultList">The result list.</param>
   /// <param name="pageSize">Size of the page.</param>
   /// <param name="currentPage">The current page.</param>
   public PagedResult(IQueryable<TValue> resultList, int pageSize, int currentPage)
   {
      PageSize = pageSize;
      TotalCount = resultList.LongCount();

      double totalPages = (double)TotalCount / (double)pageSize;
      if (totalPages % 1 != 0)
      {
         totalPages = Math.Ceiling(totalPages);
      }

      PageCount = (int)totalPages;

      if (currentPage <= 0)
         currentPage = 1;

      if (currentPage > PageCount)
         currentPage = PageCount;

      CurrentPage = currentPage;
      ResultList = resultList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
   }

   #region IDisposable Interface Implementation

   private bool _disposed;

   /// <summary>
   /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   /// </summary>
   /// <autogeneratedoc />
   [ExcludeFromCodeCoverage]
   public void Dispose()
   {
      this.Dispose(true);
      GC.SuppressFinalize(this);
   }

   /// <summary>
   /// Releases unmanaged and - optionally - managed resources.
   /// </summary>
   /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
   [ExcludeFromCodeCoverage]
   protected virtual void Dispose(bool disposing)
   {
      if (!_disposed && disposing)
      {
         // Disposing Logic
      }

      _disposed = true;
   }

   /// <summary>
   /// Finalizes an instance of the <see cref="PagedResult{TValue}"/> class.
   /// </summary>
   [ExcludeFromCodeCoverage]
   ~PagedResult()
   {
      this.Dispose(false);
   }

   #endregion
}
